buildscript {
    def props = new Properties()
    file('devbie-app-api/src/main/resources/properties/local/application.properties').withInputStream {
        props.load(it)
    }
    ext {
        querydslPluginVersion = '1.0.10'
        sonarToken = props['sonar.token']
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/" } // plugin 저장소
    }
    dependencies {
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.moowork.node' version '1.3.1'
    id 'java'
    id 'jacoco'
    id 'application'
    id "org.sonarqube" version "2.7"
}

sonarqube {
    properties {
        property "sonar.host.url", "http://3.34.66.245:8000"
        property "sonar.login", "${sonarToken}"
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.projectVersion", "1.0"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.profile", "Sonar way"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.exclusions", "**/src/frontend/**/*"
    }
}

group = 'underdogs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

node {
    version = '12.16.2'
    npmVersion = '6.14.4'
    workDir = file('./src/frontend')
    npmWorkDir = file('./src/frontend')
    nodeModulesDir = file('./src/frontend')
}

task setUp(type: NpmTask) {
    description = 'Install Node.js packages'
    args = ['install']
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task buildFrontend(type: NpmTask, dependsOn: setUp) {
    description = 'Build vue.js'
    args = ['run', 'build']
}

repositories {
    mavenCentral()
}

subprojects {
    group '2020-devbie'
    version '1.0'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        compile 'org.springframework.boot:spring-boot-starter-log4j2'
        annotationProcessor 'org.projectlombok:lombok'
        runtimeOnly 'com.h2database:h2'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    configurations {
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        finalizedBy 'jacocoTestReport'
    }

    jacoco {
        toolVersion = "0.8.5"
    }

    jacocoTestReport {
        reports {
            html.enabled true
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        def Qdomains = []
        for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
            Qdomains.add(qPattern + "*")
        }

        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }

                includes = ['*.domain.*']
                excludes = ['*.domain.*Impl*'] + Qdomains
            }
        }
    }
}

dependencies {
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.3'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}


