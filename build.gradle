plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.moowork.node' version '1.3.1'
    id 'java'
    id 'jacoco'
    id 'application'
}

group = 'underdogs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

node {
    version = '12.16.2'
    npmVersion = '6.14.4'
    workDir = file('./src/frontend')
    npmWorkDir = file('./src/frontend')
    nodeModulesDir = file('./src/frontend')
}

task setUp(type: NpmTask) {
    description = 'Install Node.js packages'
    args = ['install']
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task buildFrontend(type: NpmTask, dependsOn: setUp) {
    description = 'Build vue.js'
    args = ['run', 'build']
}

if ("$System.env.DEVBIE_ENVIRONMENT" == "product"
        || "$System.env.DEVBIE_ENVIRONMENT" == "develop") {
    processResources.dependsOn 'buildFrontend'
}

def environment = '';

if ("$System.env.DEVBIE_ENVIRONMENT" == "product") {
    environment = 'product'
}
if ("$System.env.DEVBIE_ENVIRONMENT" == "develop") {
    environment = 'develop'
}

applicationDefaultJvmArgs = ["-Dspring.profiles.active=" + environment];

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.820')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    compileOnly 'org.projectlombok:lombok'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.rest-assured:rest-assured:3.3.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        html.enabled true
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            includes = ['*.domain.*']
        }
    }
}
